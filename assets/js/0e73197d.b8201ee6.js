"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6915],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4062:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:6,title:"Experiment 2 (Wednesday Batch)"},i=void 0,l={unversionedId:"lab-handouts/exp2w",id:"lab-handouts/exp2w",title:"Experiment 2 (Wednesday Batch)",description:"",source:"@site/docs/lab-handouts/exp2w.mdx",sourceDirName:"lab-handouts",slug:"/lab-handouts/exp2w",permalink:"/docs/lab-handouts/exp2w",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Experiment 2 (Wednesday Batch)"}},c={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{class:"pdf-container"},(0,o.kt)("iframe",{src:"https://drive.google.com/file/d/1mA3HJSc8JZ9gmZZq6BVlD7-ef7bJi9Nm/preview",class:"responsive-iframe"})),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vhdl",metastring:'title="Skeleton Code"',title:'"Skeleton','Code"':!0},"library ieee;\nuse ieee.std_logic_1164.all;\n\nentity mul is\n    generic(\n        N : integer:=4; -- operand width\n        NN : integer:=8 -- result width\n        );\n    port (\n        A: in std_logic_vector(N-1 downto 0);\n        B: in std_logic_vector(N-1 downto 0);\n        M: out std_logic_vector((NN)-1 downto 0)\n    ) ;\nend mul;\n\narchitecture beh of mul is\n    -- unbounded 1D X 1D array declaration\n    type pp_type is array (natural range<>) of std_logic_vector(NN-1 downto 0);\n    -- adder function adds two 8-bit number. [Usage: var := adder(X,Y) where var is a variable\n    --                                                  and X,Y are two 8-bit inputs to be added]\n    function adder(A: in std_logic_vector; B: in std_logic_vector)\n        return std_logic_vector is\n            -- variable declaration\n            variable sum : std_logic_vector(NN downto 0):= (others=>'0');\n            variable carry : std_logic_vector(NN downto 0):= (others=>'0');\n        begin\n            -- describing behaviour of adder\n            for i in 0 to NN-1 loop\n                sum(i) := A(i) xor B(i) xor carry(i);\n                carry(i+1) := (A(i) and B(i)) or (carry(i) and (A(i) xor B(i)));\n            end loop;\n            sum(NN):=carry(NN);\n            return sum;\n    end adder;\nbegin\n\n\nmultiplier : process(A, B)\n-- declaration of 1D X 1D array to store partial products\n-- ///////////// TODO\n\n-- declaration of summation of partial product will give multiplication result which is stored in\n-- variable, result.\nvariable result : std_logic_vector(NN-1 downto 0):= (others=>'0');\n\n-- temporary array is required to avoid combinaitonal loop while adding partial product\n\nbegin\n    -- Calculation of partial product\n    -- ///////////// TODO\n    \n    -- summation of partial product\n    --///////////// TODO\n    \n    M <= result; -- assignment of final result\n\nend process ; -- multiplier\nend beh ; -- beh\n")))}u.isMDXComponent=!0}}]);