(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2584],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return s}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={title:"Prime Detector"},c={unversionedId:"lab-handouts/lab4_a",id:"lab-handouts/lab4_a",isDocsHomePage:!1,title:"Prime Detector",description:"1. Design a combinational circuit block using AND, OR, and NOT gates to check if the 4-bit binary input",source:"@site/docs/lab-handouts/lab4_a.mdx",sourceDirName:"lab-handouts",slug:"/lab-handouts/lab4_a",permalink:"/docs/lab-handouts/lab4_a",version:"current",frontMatter:{title:"Prime Detector"},sidebar:"docs",previous:{title:"Decoder",permalink:"/docs/lab-handouts/lab1_b"}},l=[],u={toc:l};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Design a combinational circuit block using AND, OR, and NOT gates to check if the 4-bit binary input\nnumber is a prime number(a 3 a 2 a 1 a 0 )(i.e. one of 2,3,5,7,11,13). The number is to be inputted through the\nfour on-board slide switches (S4-S1) with MSB bit on S4. Output bit represented by Out\nIf the input 4-bit number is:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a prime number, turn LED8 ON ","[Out = 1]","."),(0,i.kt)("li",{parentName:"ul"},"not a prime number, turn LED8 OFF ","[Out = 0]",".")))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please make use of Gates.vhdl file i.e. instantiate components defined in Gates.vhdl rather than using dataflow statements"))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Describe the logic circuit in VHDL and construct a trace-file (code not expected) which tries all 16 input\ncombinations. "),(0,i.kt)("li",{parentName:"ol"},"Simulate ( RTL and Gate-Level ) the circuit with the generic test-bench and confirm that your circuit\nfunctions correctly.\nThe format for tracefile should be:\n",(0,i.kt)("inlineCode",{parentName:"li"},"a_3 a_2 a_1 a_0 < space > Out < space > mask\u2212bits")),(0,i.kt)("li",{parentName:"ol"},"Map your logic circuit to the Krypton board."),(0,i.kt)("li",{parentName:"ol"},"Confirm that the post-synthesis gate level netlist functions correctly."),(0,i.kt)("li",{parentName:"ol"},"Program the Krypton board and make sure that your implementation works correctly."),(0,i.kt)("li",{parentName:"ol"},"Verify you design on Krypton using scanchain")))}s.isMDXComponent=!0}}]);